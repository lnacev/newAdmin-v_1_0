<?php
 define('NL', "\n"); if(!isset($_SERVER['REQUEST_URI'])) { if(isset($_SERVER['HTTP_X_REWRITE_URL'])) { $_SERVER['REQUEST_URI'] = $_SERVER['HTTP_X_REWRITE_URL']; } elseif(isset($_SERVER['HTTP_REQUEST_URI'])) { $_SERVER['REQUEST_URI'] = $_SERVER['HTTP_REQUEST_URI']; } else { if(isset($_SERVER['SCRIPT_NAME'])) { $_SERVER['HTTP_REQUEST_URI'] = $_SERVER['SCRIPT_NAME']; } else { $_SERVER['HTTP_REQUEST_URI'] = $_SERVER['PHP_SELF']; } if(!empty($_SERVER['QUERY_STRING'])) { $_SERVER['HTTP_REQUEST_URI'] .= '?'.$_SERVER['QUERY_STRING']; } $_SERVER['REQUEST_URI'] = $_SERVER['HTTP_REQUEST_URI']; } } class db_connection { public $prefix, $database, $query_log = array(); private $link; public function __construct($server, $user, $password, $database = null, $prefix = '') { $link = @mysql_connect($server, $user, $password); if(is_resource($link)) { if(function_exists('mysql_set_charset')) mysql_set_charset('utf8', $link); else mysql_query('SET NAMES `utf8`', $link); if($database !== null && @mysql_select_db($database, $link) !== true) { $e = new InvalidArgumentException(__class__.': Could not set active database to \''.$database.'\'!'); $e->debug_info = 'Error: '.@mysql_error(); throw $e; } $this->link = $link; $this->prefix = $prefix; $this->database = $database; } else { $e = new InvalidArgumentException(__class__.': Could not establish connection to the specified MySQL server!'); $e->debug_info = 'Error: '.@mysql_error(); throw $e; } } public function query($sql) { $query = @mysql_query($sql, $this->link); if($query === false) { $e = new BadMethodCallException(__class__.': SQL query failure!'); $e->debug_info = 'Error: '.mysql_error($this->link).NL.'SQL code: '.$sql; throw $e; } return $query; } public function select() { $cols = func_get_args(); return new db_select($this, $cols); } public function update($table) { return new db_update($this, $table); } public function delete($table) { return new db_delete($this, $table); } public function insert() { $cols = func_get_args(); return new db_insert($this, $cols); } public function affectedRows() { return mysql_affected_rows($this->link); } public function insertID() { return mysql_result($this->query('SELECT LAST_INSERT_ID()'), 0); } public function esc($str) { return mysql_real_escape_string($str, $this->link); } public function val($value) { if(is_string($value)) return '\''.mysql_real_escape_string($value).'\''; elseif($value === null) return 'NULL'; elseif(is_int($value) || is_float($value)) return $value; elseif(is_bool($value)) return ($value ? '1' : '0'); else return '\'\''; } public function sql($sql) { return new db_sql($sql); } public function col($column, $parse_alias = false) { return $this->_identifier($column, 0, $parse_alias); } public function tbl($table, $parse_alias = false) { return $this->_identifier($table, 1, $parse_alias); } public function in() { $output = 'IN('; $values = func_get_args(); for($i = 0, $size = sizeof($values), $last = ($size - 1); $i < $size; ++$i) { $output .= $this->val($values[$i]); if($i !== $last) $output .= ','; } $output .= ')'; return $output; } public function _identifier($idt, $type, $parse_alias = false) { if($idt instanceof db_sql) return $idt->sql; $alias = null; if($parse_alias) { $alias = explode(':', $idt, 2); if(isset($alias[1])) { $idt = $alias[0]; $alias = $alias[1]; } else $alias = null; } $idt = explode('.', $idt, ($type === 0 ? 3 : 2)); $idt_size = sizeof($idt); $table_index = ($type === 0 ? ($idt_size - 2) : ($idt_size - 1)); $db_index = ($type === 0 ? ($idt_size - 3) : ($idt_size - 2)); $expr = ''; for($i = 0, $last = ($idt_size - 1); isset($idt[$i]); ++$i) { if($idt[$i] === '*') $expr .= '*'; elseif($i === $table_index) $expr .= '`'.((!isset($idt[$db_index]) || $idt[$db_index] === $this->database) ? $this->prefix : '').$idt[$i].'`'; else $expr .= '`'.$idt[$i].'`'; if($i !== $last) $expr .= '.'; } if($alias !== null) $expr .= ' AS `'.$alias.'`'; return $expr; } public function _columnList($cols, $parse_aliases = false) { if(empty($cols)) throw new UnderflowException(__class__.': List of columns cannot be empty!'); $output = ''; for($i = 0, $last = (sizeof($cols) - 1); isset($cols[$i]); ++$i) { $output .= $this->_identifier($cols[$i], 0, $parse_aliases); if($i !== $last) $output .= ','; } return $output; } public function _tableList($tables, $parse_aliases = false) { if(empty($tables)) throw new UnderflowException(__class__.': List of tables cannot be empty!'); $output = ''; for($i = 0, $last = (sizeof($tables) - 1); isset($tables[$i]); ++$i) { $output .= $this->_identifier($tables[$i], 1, $parse_aliases); if($i !== $last) $output .= ','; } return $output; } public function _joins($joins) { $output = ' '; for($i = 0; isset($joins[$i]); ++$i) { $output .= $joins[$i][3].' JOIN '.$this->_identifier($joins[$i][1], 1, true); if($joins[$i][0] === 0) $output .= ' ON '.(is_array($joins[$i][2]) ? $this->_identifier($joins[$i][2][0], 0).'='.$this->_identifier($joins[$i][2][1], 0) : $joins[$i][2]); else $output .= ' USING '.$this->_identifier($joins[$i][2], 0); } return $output; } } class db_delete { public $con; private $table, $where, $order, $limit; public function __construct($con, $table) { $this->con = $con; $this->table = $table; } public function where($where) { $this->where = $where; return $this; } public function orderBy($order) { $this->order = $order; return $this; } public function limit($num, $num2 = null) { if($num2 === null) { $this->limit = (int)$num; $this->offset = null; } else { $this->limit = (int)$num2; $this->offset = (int)$num; } return $this; } public function exec() { return $this->con->query($this->_compose()); } private function _compose() { $sql = 'DELETE FROM '.$this->con->_identifier($this->table, 1); if(!empty($this->where)) $sql .= ' WHERE '.$this->where; if(!empty($this->order)) $sql .= ' ORDER BY '.$this->order; if(!empty($this->limit)) $sql .= ' LIMIT '.(isset($this->offset) ? $this->offset.',' : '').$this->limit; return $sql; } } class db_insert { public $con; private $ignore = false, $table, $columns, $values = array(); public function __construct($con, $cols) { $this->con = $con; $this->columns = $cols; } public function ignore($new_state = true) { $this->ignore = $new_state; } public function into($table) { $this->table = $table; return $this; } public function row() { $this->values[] = func_get_args(); return $this; } public function exec() { return $this->con->query($this->_compose()); } private function _compose() { $sql = 'INSERT'.($this->ignore ? ' IGNORE' : '').' INTO '.$this->con->_identifier($this->table, 1).' ('.$this->con->_columnList($this->columns).') VALUES '; if(empty($this->values)) throw new UnderflowException(__class__.': No values specified!'); for($i = 0, $last = (sizeof($this->values) - 1); isset($this->values[$i]); ++$i) { $sql .= '('; for($ii = 0, $size = sizeof($this->values[$i]), $last2 = ($size - 1); $ii < $size; ++$ii) { $sql .= $this->con->val($this->values[$i][$ii]); if($ii !== $last2) $sql .= ','; } $sql .= ')'; if($i !== $last) $sql .= ','; } return $sql; } } class db_select { public $con; private $columns, $joins = array(), $tables, $where, $group, $having, $order, $limit; public function __construct($con, $cols = array()) { $this->con = $con; $this->columns = $cols; } public function from() { $this->tables = func_get_args(); return $this; } public function joinOn($table, $on, $type = 'INNER') { $this->joins[] = array(0, $table, $on, $type); return $this; } public function joinUsing($table, $column, $type = 'INNER') { $this->joins[] = array(1, $table, $column, $type); return $this; } public function where($where) { $this->where = $where; return $this; } public function groupBy($group) { $this->group = $group; return $this; } public function having($having) { $this->having = $having; return $this; } public function orderBy($order) { $this->order = $order; return $this; } public function limit($num, $num2 = null) { if($num2 === null) { $this->limit = (int)$num; $this->offset = null; } else { $this->limit = (int)$num2; $this->offset = (int)$num; } return $this; } public function match($no_limit = false) { return mysql_result($this->con->query($this->_compose(true, $no_limit)), 0); } public function exec() { return new db_result($this, $this->_compose()); } private function _compose($match = false, $match_no_limit = false) { $sql = 'SELECT '.($match ? (($match_no_limit || empty($this->limit)) ? 'COUNT(*)' : 'IF(COUNT(*)>'.$this->limit.','.$this->limit.',COUNT(*))') : $this->con->_columnList($this->columns, true)).' FROM '.$this->con->_tableList($this->tables, true); if(!empty($this->joins)) $sql .= $this->con->_joins($this->joins); if(!empty($this->where)) $sql .= ' WHERE '.$this->where; if(!empty($this->group)) $sql .= ' GROUP BY '.$this->group; if(!empty($this->having)) $sql .= ' HAVING '.$this->having; if(!empty($this->order)) $sql .= ' ORDER BY '.$this->order; if(!empty($this->limit) && !$match) $sql .= ' LIMIT '.(isset($this->offset) ? $this->offset.',' : '').$this->limit; return $sql; } } class db_update { public $con; private $table, $sets = array(), $where, $where_set = false, $order, $limit; public function __construct($con, $table) { $this->con = $con; $this->table = $table; } public function set($column, $value) { $this->sets[] = array($column, $value); return $this; } public function where($where = '') { $this->where = $where; $this->where_set = true; return $this; } public function orderBy($order) { $this->order = $order; return $this; } public function limit($num, $num2 = null) { if($num2 === null) { $this->limit = (int)$num; $this->offset = null; } else { $this->limit = (int)$num2; $this->offset = (int)$num; } return $this; } public function exec() { return $this->con->query($this->_compose()); } private function _compose() { $sql = 'UPDATE '.$this->con->_identifier($this->table, 1).' SET '; if(empty($this->sets)) throw new UnderflowException(__class__.': No changes specified!'); for($i = 0, $last = (sizeof($this->sets) - 1); isset($this->sets[$i]); ++$i) { $sql .= $this->con->_identifier($this->sets[$i][0], 0).'='.$this->con->val($this->sets[$i][1]); if($i !== $last) $sql .= ','; } if(!$this->where_set) throw new Exception(__class__.': Update requires where() to be called - to avoid accidental updates of all table entries. Use where() with no or empty argument to force query with no WHERE clause.'); if(!empty($this->where)) $sql .= ' WHERE '.$this->where; if(!empty($this->order)) $sql .= ' ORDER BY '.$this->order; if(!empty($this->limit)) $sql .= ' LIMIT '.(isset($this->offset) ? $this->offset.',' : '').$this->limit; return $sql; } } class db_sql { public $sql; public function __construct($sql) { $this->sql = $sql; } } class db_result { private $result, $size; public $sql, $current_row = 0; public function __construct($query, $sql) { $this->sql = $sql; $this->result = $query->con->query($sql); if(!is_resource($this->result)) { $e = new UnexpectedValueException(__class__.': Invalid SQL query result - cannot be iterated!'); $e->debug_info = 'SQL code: '.$sql; throw $e; } } public function row() { $row = mysql_fetch_assoc($this->result); ++$this->current_row; if($row === false) $this->reset(); return $row; } public function rows($key_column = null) { $output = array(); if($this->current_row !== 0) $this->reset(); while($row = $this->row()) { if(isset($key_column)) $output[$row[$key_column]] = $row; else $output[] = $row; } return $output; } public function reset() { $this->current_row = 0; return @mysql_data_seek($this->result, 0); } public function size() { if(!isset($this->size)) $this->size = mysql_num_rows($this->result); return $this->size; } } class fc { public static $i; private static $url_void = array('scheme' => '', 'host' => '', 'port' => '', 'user' => '', 'pass' => '', 'path' => '', 'query' => array(), 'fragment' => ''); private $url, $ip, $ip_hash; private function __construct() { } public static function initSingleton() { if(!isset(self::$i)) self::$i = new self(); } public function strEnt($str) { return htmlspecialchars($str, ENT_QUOTES, 'UTF-8'); } public function url($encode = false) { if(!isset($this->url)) $this->url = 'http://'.$_SERVER['SERVER_NAME'].(($_SERVER['SERVER_PORT'] != 80) ? ':'.$_SERVER['SERVER_PORT'] : '').$_SERVER['REQUEST_URI']; return ($encode ? urlencode($this->url) : $this->url); } public function urlBreak($url = null, $index = null) { if($url === null) $url = $this->url(); if(!is_array($url)) { $url = @parse_url($url); if($url === false) $url = array(); if(isset($url['query'])) { parse_str($url['query'], $url['query']); } } $url = $url + self::$url_void; if($index === null) { return $url; } else { return (isset($url[$index]) ? $url[$index] : null); } } public function urlMake($components) { $components += self::$url_void; $output = ''; if(!empty($components['scheme'])) $output .= $components['scheme'].'://'; if(!empty($components['user'])) $output .= $components['user']; if(!empty($components['pass'])) $output .= ':'.$components['pass']; if(!empty($components['user']) || !empty($components['pass'])) $output .= '@'; if(!empty($components['host'])) $output .= $components['host']; if(!empty($components['port'])) $output .= ':'.$components['port']; if(!empty($components['path'])) $output .= (substr($components['path'], 0, 1) != '/' ? '/' : '').$components['path']; else $output .= '/'; if(!empty($components['query']) && is_array($components['query'])) { $output .= '?'; $output .= http_build_query($components['query'], '_', '&'); } if(!empty($components['fragment'])) $output .= '#'.$components['fragment']; return $output; } public function urlAddQuery($url) { $xurl = $this->urlBreak($url, null, true); if($xurl === false) { return $url; } $arg_num = func_num_args(); if($arg_num === 2) { $query = func_get_arg(1); if(is_array($query)) ; elseif(is_string($query)) parse_str($query, $query); else return $url; } elseif($arg_num > 2 && ($arg_num - 1) % 2 === 0) { $query = array(); for($i = 0, $size = (($arg_num - 1) / 2); $i < $size; ++$i) $query[func_get_arg($i * 2 + 1)] = func_get_arg($i * 2 + 2); } else return $url; if(is_array($xurl['query'])) $xurl['query'] = $query + $xurl['query']; else $xurl['query'] = $query; return $this->urlMake($xurl); } public function urlRemoveQuery($url = null) { $url = $this->urlBreak($url); $rem = array_slice(func_get_args(), 1); for($i = 0; isset($rem[$i]); ++$i) unset($url['query'][$rem[$i]]); return $this->urlMake($url); } public function urlSet($url) { $this->url = $url; } } fc::initSingleton(); class pager { public $pages, $page, $limit, $count, $url; private $page_param, $pages_range = 8; private static $text = array('previous' => 'předchozí', 'next' => 'další'); public function __construct($pLimit, $pPageParam = 'pg') { $this->page_param = $pPageParam; $this->page = (isset($_GET[$this->page_param]) ? abs((int)$_GET[$this->page_param]) : 1); if($this->page < 1) { $this->page = 1; } $this->limit = (int)$pLimit; $this->url = $_SERVER['REQUEST_URI']; } public function offset() { return (($this->page - 1) * $this->limit); } public function pages() { if($this->count === null) { return 'no count supplied'; } $this->pages = (int)ceil($this->count / $this->limit); if($this->pages === 0) { $this->pages = 1; } if($this->page > $this->pages) { $this->page = $this->pages; } $xStart = ($this->page - floor($this->pages_range / 2)); if($xStart < 1) { $xStart = 1; $xEnd = $this->pages_range; } else { $xEnd = ($this->page + ceil($this->pages_range / (2)) - 1); } if($xEnd > $this->pages) { $xOff = ($xEnd - $this->pages); $xEnd = $this->pages; if(($xStart - $xOff) > 0) { $xStart -= $xOff; } else { $xStart = 1; } } if($this->page > (floor($this->pages_range / 2) + 1)) $otp_first = fc::$i->urlAddQuery($this->url, $this->page_param, 1); if($this->page != 1) $otp_previous = fc::$i->urlAddQuery($this->url, $this->page_param, ($this->page - 1)); $otp_pages = array(); for($i = $xStart; $i <= $xEnd; ++$i) $otp_pages[$i] = fc::$i->urlAddQuery($this->url, $this->page_param, $i); if($this->page != $this->pages) $otp_next = fc::$i->urlAddQuery($this->url, $this->page_param, ($this->page + 1)); if($this->pages > $this->pages_range && $this->page < ($this->pages - ceil($this->pages_range / 2) + 1)) $otp_last = fc::$i->urlAddQuery($this->url, $this->page_param, $this->pages); $code = '<div class="pager">'; if(isset($otp_first)) $code .= '<a href="'.fc::$i->strEnt($otp_first).'">1</a>'.NL; if(isset($otp_previous)) $code .= '<a href="'.fc::$i->strEnt($otp_previous).'">'.self::$text['previous'].'</a>'.NL; for($i = $xStart; $i <= $xEnd; ++$i) $code .= '<a href="'.fc::$i->strEnt($otp_pages[$i]).'"'.(($i == $this->page) ? ' class="act"' : '').'>'.$i.'</a>'.NL; if(isset($otp_next)) $code .= '<a href="'.fc::$i->strEnt($otp_next).'">'.self::$text['next'].'</a>'.NL; if(isset($otp_last)) $code .= '... <a href="'.fc::$i->strEnt($otp_last).'">'.$this->pages.'</a>'; $code .= '</div>'; return $code; } } ?>